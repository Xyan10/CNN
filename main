import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader

# processing data
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

#load dataset
trainset = torchvision.datasets.CIFAR10(root='/Users/zhao/Desktop/images/cifar10Train', train=True, download=True, transform=transform)
trainloader = DataLoader(trainset, batch_size=128, shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='/Users/zhao/Desktop/images/cifar10Test', train=False, download=True, transform=transform)
testloader = DataLoader(testset, batch_size=128, shuffle=False, num_workers=2)

#define model
class CNN(nn.Module):
    def __init__(self, num_layers=3, kernel_size=3, activation='ReLU', use_bn=True, fc_size=256):
        super(CNN, self).__init__()
        layers = []
        in_channels = 3
        for i in range(num_layers):
            layers.append(nn.Conv2d(in_channels, 64, kernel_size, padding=kernel_size//2))
            if use_bn:
                layers.append(nn.BatchNorm2d(64))
            if activation == 'ReLU':
                layers.append(nn.ReLU())
            elif activation == 'LeakyReLU':
                layers.append(nn.LeakyReLU(0.1))
            elif activation == 'Swish':
                layers.append(nn.SiLU())
            layers.append(nn.MaxPool2d(2))
            in_channels = 64
        
        self.conv = nn.Sequential(*layers)
        self.fc = nn.Sequential(
            nn.Flatten(),
            nn.Linear(64 * (32 // (2 ** num_layers)) ** 2, fc_size),
            nn.ReLU(),
            nn.Linear(fc_size, 10)
        )
    
    def forward(self, x):
        x = self.conv(x)
        x = self.fc(x)
        return x
#train
def train_and_evaluate(model, epochs=10):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    for epoch in range(epochs):
        model.train()
        total_loss, correct, total = 0, 0, 0
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
        print(f"Epoch {epoch+1}, Loss: {total_loss / len(trainloader):.4f}, Acc: {correct / total:.4f}")
    
    #test
    model.eval()
    correct, total = 0, 0
    with torch.no_grad():
        for images, labels in testloader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
    print(f"Test Accuracy: {correct / total:.4f}")

#setting
experiments1 = [
    {'num_layers': 3, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 5, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
]
experiments2 = [
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 5, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 7, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
]
experiments3 = [
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'LeakyReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'Swish', 'use_bn': True, 'fc_size': 256},
]
experiments4 = [
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 128},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 64},
]
experiments5 = [
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': True, 'fc_size': 256},
    {'num_layers': 4, 'kernel_size': 3, 'activation': 'ReLU', 'use_bn': False, 'fc_size': 256},
]

#running
for config in experiments1:
    print(f"Running experiment: {config}")
    model = CNN(**config)
    train_and_evaluate(model)

for config in experiments2:
    print(f"Running experiment: {config}")
    model = CNN(**config)
    train_and_evaluate(model)

for config in experiments3:
    print(f"Running experiment: {config}")
    model = CNN(**config)
    train_and_evaluate(model)

for config in experiments4:
    print(f"Running experiment: {config}")
    model = CNN(**config)
    train_and_evaluate(model)

for config in experiments5:
    print(f"Running experiment: {config}")
    model = CNN(**config)
    train_and_evaluate(model)
